{"version":3,"sources":["components/navbar.js","components/hero.js","components/characterCard.js","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","role","aria-label","score","Hero","src","alt","CharacterCard","id","image","onClick","imageClick","Footer","href","App","state","characters","clickedCharacters","event","currantCharacters","target","_this","indexOf","setState","sort","b","Math","random","swal","title","text","button","concat","icon","_this2","this","Fragment","navbar","hero","map","character","characterCard","key","footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"g8CAeeA,MAbf,SAAgBC,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBC,KAAK,aAAaC,aAAW,mBAChEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oCAAd,6BAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oCAAd,UAAyDJ,EAAMO,gBCSxDC,MAff,WACE,OACEP,EAAAC,EAAAC,cAAA,WAASC,UAAU,0BACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaK,IAAI,6EAA6EC,IAAI,sBACjHT,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,sGCAKO,MANf,SAAuBX,GACrB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOM,IAAKV,EAAMY,GAAIH,IAAKT,EAAMa,MAAOC,QAASd,EAAMe,cCS3DC,MAZf,WACE,OACEf,EAAAC,EAAAC,cAAA,UAAQC,UAAU,0BAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,KAAGc,KAAK,6CAA6CL,GAAG,cACtDX,EAAAC,EAAAC,cAAA,6DC4FKe,oNAtFbC,MAAQ,CACNC,aACAC,kBAAmB,GACnBd,MAAO,KAITQ,WAAa,SAAAO,GACX,IAAMC,EAAoBD,EAAME,OAAOd,IAErCe,EAAKN,MAAME,kBAAkBK,QAAQH,IAAsB,GAI3DE,EAAKE,SAAS,CACZP,WAAYK,EAAKN,MAAMC,WAAWQ,KAAK,SAAU1B,EAAG2B,GAClD,MAAO,GAAMC,KAAKC,WAEpBV,kBAAmB,GACnBd,MAAO,IAETyB,IAAK,CACHC,MAAO,WACPC,KAAM,yDACNC,OAAQ,YAKVV,EAAKE,SACH,CACEP,WAAYK,EAAKN,MAAMC,WAAWQ,KAAK,SAAU1B,EAAG2B,GAClD,MAAO,GAAMC,KAAKC,WAEpBV,kBAAmBI,EAAKN,MAAME,kBAAkBe,OAC9Cb,GAEFhB,MAAOkB,EAAKN,MAAMZ,MAAQ,GAI5B,WAC2B,KAArBkB,EAAKN,MAAMZ,QACbyB,IAAK,CACHC,MAAO,YACPC,KAAM,gEACNG,KAAM,UACNF,OAAQ,WAEVV,EAAKE,SAAS,CACZP,WAAYK,EAAKN,MAAMC,WAAWQ,KAAK,SAAU1B,EAAG2B,GAClD,MAAO,GAAMC,KAAKC,WAEpBV,kBAAmB,GACnBd,MAAO,gFASV,IAAA+B,EAAAC,KACP,OACEtC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsC,SAAA,KACEvC,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAACsC,EAAD,CAAQlC,MAAOgC,KAAKpB,MAAMZ,QAC1BN,EAAAC,EAAAC,cAACuC,EAAD,MACAzC,EAAAC,EAAAC,cAAA,WAASC,UAAU,mBAEhBmC,KAAKpB,MAAMC,WAAWuB,IAAI,SAAAC,GAAS,OAClC3C,EAAAC,EAAAC,cAAC0C,EAAD,CACE9B,WAAYuB,EAAKvB,WACjBH,GAAIgC,EAAUhC,GACdkC,IAAKF,EAAUhC,GACfC,MAAO+B,EAAU/B,WAKvBZ,EAAAC,EAAAC,cAAC4C,EAAD,cAlFUC,cCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ccdf6679.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Navbar(props) {\n  return (\n    <nav className=\"navbar is-fixed-top\" role=\"navigation\" aria-label=\"main navigation\">\n      <div className=\"navbar-brand\">\n        <h1 className=\"navbar-item title has-text-white\">Regular Show Clicky Game</h1>\n      </div>\n      <div className=\"navbar-end\">\n        <h1 className=\"navbar-item title has-text-white\">Score: {props.score}</h1>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;","import React from 'react';\nimport \"./Hero.css\";\n\nfunction Hero() {\n  return (\n    <section className='hero has-text-centered'>\n      <div className='hero-body'>\n        <div className='container'>\n          <img className=\"title-logo\" src='https://help.redbubble.com/hc/article_attachments/360023220451/RS_Logo.png' alt='Regular Show logo' />\n          <h2 className='subtitle'>\n            Click on an image to earn points, if you click on the same image twice the game is over!\n          </h2>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Hero","import React from 'react';\nimport './CharacterCard.css';\n\nfunction CharacterCard(props) {\n  return (\n    <img className='card' alt={props.id} src={props.image} onClick={props.imageClick} />\n  )\n}\n\nexport default CharacterCard","import React from 'react';\n\nfunction Footer() {\n  return (\n    <footer className='footer is-fixed-bottom'>\n      <div className='content has-text-centered'>\n        <a href=\"https://github.com/gpiercelusk/clicky-game\" id=\"githubLink\">\n          <h5> G. Pierce Lusk 2019</h5>\n        </a>\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport Navbar from './components/navbar';\nimport Hero from './components/hero';\nimport CharactersCard from './components/characterCard'\nimport Footer from './components/footer'\nimport characters from \"./character.json\";\nimport swal from 'sweetalert';\n\nimport './App.css';\n\n\n//sets state to 0 \nclass App extends Component {\n  state = {\n    characters,\n    clickedCharacters: [],\n    score: 0\n  };\n\n  //when you click on a card ... the characters is taken out of the array\n  imageClick = event => {\n    const currantCharacters = event.target.alt;\n    const charactersAlreadyClicked =\n      this.state.clickedCharacters.indexOf(currantCharacters) > -1;\n\n    //if you click on a characters that has already been selected, the game is reset and cards reordered\n    if (charactersAlreadyClicked) {\n      this.setState({\n        characters: this.state.characters.sort(function (a, b) {\n          return 0.5 - Math.random();\n        }),\n        clickedCharacters: [],\n        score: 0\n      });\n      swal({\n        title: \"You lose\",\n        text: \"OOOOOOOOOOOOOOOHHHHHHH! You clicked a character twice!\",\n        button: \"Again?\",\n      });\n\n      //if you click on an available characters, your score is increased and cards reordered\n    } else {\n      this.setState(\n        {\n          characters: this.state.characters.sort(function (a, b) {\n            return 0.5 - Math.random();\n          }),\n          clickedCharacters: this.state.clickedCharacters.concat(\n            currantCharacters\n          ),\n          score: this.state.score + 1\n        },\n\n        //if you get all 12 characters correct you get a congrats message and the game resets        \n        () => {\n          if (this.state.score === 12) {\n            swal({\n              title: \"Good job!\",\n              text: \"OOOOOOOOOOOOOOOHHHHHHH! You clicked all characters just once!\",\n              icon: \"success\",\n              button: \"Again?\",\n            });\n            this.setState({\n              characters: this.state.characters.sort(function (a, b) {\n                return 0.5 - Math.random();\n              }),\n              clickedCharacters: [],\n              score: 0\n            });\n          }\n        }\n      );\n    }\n  };\n\n  //the order of components to be rendered: navbar, Hero, CharacterCard, footer \n  render() {\n    return (\n      <>\n        <p></p>\n        <Navbar score={this.state.score} />\n        <Hero />\n        <section className=\"section wrapper\">\n\n          {this.state.characters.map(character => (\n            <CharactersCard\n              imageClick={this.imageClick}\n              id={character.id}\n              key={character.id}\n              image={character.image}\n            />\n          ))}\n\n        </section>\n        <Footer />\n      </>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}